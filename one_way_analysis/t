#Â Geostationary satellite modelling using GMAT

If using Telstar11N relayed TWSTFT for one-way communication to a passive
user, the satellite motion around its equilibrium location by +/-75 us will
significantly degrade the receiver clock synchronization performance.

Unless a station keeping burst to bring the satellite back to its position
occurs, the satellite mechanics is predicted by celestial mechanics as implemented
in e.g. https://www.orekit.org/, https://nyxspace.com/ or here https://software.nasa.gov/software/GSC-17177-1 (GMAT: General Mission Analysis Tool). We are using release 2022 found
on the Sourceforge, pre-build image for Ubuntu LTS running on a VirtualBox. The only
modification made to the GMAT archive content is updating the ``gmat_startup_file.txt`` in the
``bin/`` directory by modifying ``PLUGIN=../plugins/libPythonInterface_py310`` so that
the default Python3.10 can be used and commeting out ``# PLUGIN=../plugins/libMatlabInterface``
to remove the Matlab support.

We follow tutorial 14 found in the help.html file at 
docs/help/help.html#Orbit_Estimation_using_DSN_Range_and_Doppler_Data

This tutorial considers a deep space mission with velocity and position of the spacecraft
observed by the Deep Space Network (DSN) and is found in samples/Tut_Orbit_Estimation_using_DSN_Range_and_Doppler_Data.script which is the starting point of our analysis.

## Orbit determination

After downloading the BIPM TWSTFT archive using ````
```
wget --recursive --no-parent https://webtai.bipm.org/ftp/pub/tai/data/2023/time_transfer/twstft
```
we produce the GMD file including name in MJD-30000, station name, observable (Range) and
observable type, and measurement by multiplying the time of flight with the speed of light
in km/s as found in go.m. This is also the script where we associate a random identifier to
each observatory, matching the definition in the GMAT script (OP=0, PTB=1, NPL=2, ROA=3, SP=4, IT=5).
